//question 1: Reverse Linked List
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==NULL||head->next==NULL){
            return head;
        }
        ListNode* tempbw=head;
        ListNode* temp=head->next;
        ListNode* tempfw=head->next->next;
        head->next=NULL;
        while(tempfw!=NULL){
            temp->next=tempbw;
            tempbw=temp;
            temp=tempfw;
            tempfw=tempfw->next;
        }
        temp->next=tempbw;
        head=temp;
        return head;
    }
};

//question 2: Linked List Cycle
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* h=head;
        if(head==NULL||head->next==NULL){
            return false;
        }
        while(h!=NULL && h->next!=NULL){
            head=head->next;
            h=h->next->next;
            if(head==h){
                return true;
            }
        }
        return false;
    }
};
