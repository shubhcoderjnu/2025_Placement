//question 1: Baseball Game
class Solution {
public:
    int calPoints(vector<string>& operations) {
        stack<int> s;
        int i=0;
        while(i<operations.size()){
            if(operations[i]!="C"&&operations[i]!="D"&&operations[i]!="+"){
                s.push(stoi(operations[i]));
            }
            else if(operations[i]=="+"){
                int b=s.top();
                s.pop();
                int a=s.top();
                s.push(b);
                s.push(a+b);
            }
            else if(operations[i]=="C"){
                s.pop();
            }
            else if(operations[i]=="D"){
                int a=s.top();
                s.push(2*a);
            }
            i++;
        }
        int a=0;
        while(!s.empty()){
            a+=s.top();
            s.pop();
        }
        return a;
    }
};

//question 2: Stock Span
class Solution {
public:
    string countOfAtoms(string formula) {
        vector<pair<string,int>> f;
        stack<pair<string,int>> s;
        int i=0;
        while(i<formula.size()){
            if(!isdigit(formula[i])){
                if(isalpha(formula[i])){
                if(islower(formula[i])){
                    string c=s.top().first;
                    s.pop();
                    s.push({c+formula[i],1});
                }
                else{
                    s.push({string(1,formula[i]),1});
                }}
                else{
                    if(formula[i]==')' && !isdigit(formula[i+1])){
                        stack<pair<string,int>> k;
                        while(s.top().first!="("){
                            k.push(s.top());
                            s.pop();
                        }
                        s.pop();
                        while(!k.empty()){
                            s.push(k.top());
                            k.pop();
                        }
                    }else{
                    s.push({string(1,formula[i]),0});}
                }
            }
            else{
                if(s.top().first==")"){
                    string a="";
                    while(isdigit(formula[i]) &&i<formula.size()){
                        a+=formula[i];
                        i++;
                    }
                    i--;
                    s.pop();
                    stack<pair<string,int>> k;
                    while(s.top().first!="("){
                        k.push({s.top().first,s.top().second*stoi(a)});
                        s.pop();
                    }
                    s.pop();
                    while(!k.empty()){
                        s.push(k.top());
                        k.pop();
                    }
                }
                else if(isdigit(formula[i-1])){
                    s.top().second=s.top().second*10+stoi(string(1,formula[i]));
                }
                else{
                    s.top().second*=stoi(string(1,formula[i]));
                }
            }
            i++;
        }
        while(!s.empty()){
            f.push_back(s.top());
            s.pop();
        }
        for(i=0;i<f.size()-1;i++){
                bool b=true;
            for(int j=1;j<f.size()-i;j++){
                if(f[j].first<f[j-1].first){
                    swap(f[j],f[j-1]);
                    b=false;
                }
            }
            if(b){
                break;
            }
        }
        for(i=1;i<f.size();){
            if(f[i].first==f[i-1].first){
                int x=f[i].second;
                f[i-1].second+=x;
                f.erase(f.begin()+i);
            }
            else{
                i++;
            }
        }
        string r="";
        for(i=0;i<f.size();i++){
            if(f[i].first!="(" && f[i].first!=")"){
            r+=f[i].first;
            if(f[i].second<2){
                continue;
            }
            else{
                r+=to_string(f[i].second);
            }}
        }
        return r;
    }
};

//question 3: Linked List Random Node
class Solution {
private:
    ListNode* head;

public:
    Solution(ListNode* head) {
        this->head = head;
    }

    int getRandom() {
        int result = head->val;
        ListNode* curr = head->next;
        int i = 2;

        while (curr != nullptr) {
            // with probability 1/i, choose the current node
            if (rand() % i == 0) {
                result = curr->val;
            }
            curr = curr->next;
            i++;
        }

        return result;
    }
};
