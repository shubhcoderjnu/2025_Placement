//question1: Design Stack Using Queues
class MyStack {
public:
    stack<int> s;
    MyStack() {
        
    }
    
    void push(int x) {
        s.push(x);
    }
    
    int pop() {
        int x= s.top();
        s.pop();
        return x;
    }
    
    int top() {
        return s.top();
    }
    
    bool empty() {
        return s.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */

//question2:Design Queues Using Stack
class MyQueue {
public:
    stack<int> s1,s2;
    MyQueue() {
        
    }
    
    void push(int x) {
        s1.push(x);
    }
    
    int pop() {
        while(s1.size()>0){
            s2.push(s1.top());
            s1.pop();
        }
        int f=s2.top();
        s2.pop();
        while(s2.size()>0){
            s1.push(s2.top());
            s2.pop();
        }
        return f;
    }
    
    int peek() {
        while(s1.size()>0){
            s2.push(s1.top());
            s1.pop();
        }
        int f=s2.top();
        while(s2.size()>0){
            s1.push(s2.top());
            s2.pop();
        }
        return f;
    }
    
    bool empty() {
        return s1.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */

//question3:Evaluate Reverse Polish Notation
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> s;
        int i=0;
        while(i<tokens.size()){
            if(tokens[i]!="+"&&tokens[i]!="-"&&tokens[i]!="*"&&tokens[i]!="/"){
                s.push(stoi(tokens[i]));
            }
            else if(tokens[i]=="+"){
                int b=s.top();
                s.pop();
                int a=s.top();
                s.pop();
                s.push(a+b);
            }
            else if(tokens[i]=="-"){
                int b=s.top();
                s.pop();
                int a=s.top();
                s.pop();
                s.push(a-b);
            }
            else if(tokens[i]=="*"){
                int b=s.top();
                s.pop();
                int a=s.top();
                s.pop();
                s.push(a*b);
            }
            else if(tokens[i]=="/"){
                int b=s.top();
                s.pop();
                int a=s.top();
                s.pop();
                s.push(a/b);
            }
            i++;
        }
        return s.top();
    }
};
