//question 1:Design Queue using Arrays
#include<iostream>
#include<vector>
using namespace std;
class queue{
    public:
    vector<int> arr;
    int front(){
        return *arr.begin();
    }
    void enqueue(int n){
        arr.push_back(n);
    }
    int dequeue(){
        int x=arr[0];
        arr.erase(arr.begin());
        return x;
    }
    bool isEmpty(){
       return arr.empty();
    }
    int size(){
        return arr.size();
    }
};
int main(){
    queue q;
    cout<<q.isEmpty()<<endl;
    q.enqueue(2);
    cout<<q.front()<<endl;
    q.enqueue(8);
    cout<<q.front()<<endl;
    q.enqueue(5);
    cout<<q.dequeue()<<endl;
    cout<<q.front()<<endl;
    cout<<q.size()<<endl;
    cout<<q.isEmpty()<<endl;
    return 0;
}

//question 2:Next Greater Element I
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
       vector<int> arr;
       for(int i=0;i<nums1.size();i++){
        for(int j=0;j<nums2.size();j++){
            if(nums1[i]==nums2[j]){
                if(j==nums2.size()-1){
                    arr.push_back(-1);
                }
                else{
                    bool b=true;
                    for(int k=j+1;k<nums2.size();k++){
                        if(nums2[k]>nums2[j]){
                            arr.push_back(nums2[k]);
                            b=false;
                            break;
                        }
                    }
                    if(b==true){
                        arr.push_back(-1);
                    }
                }
                break;
            }
        }
       }
       return arr;
    }
};

//question 3:Next Greater Element II
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        vector<int> arr;
        for(int i=0;i<nums.size();i++){
            bool b=true;
            for(int j=i+1;j<nums.size();j++){
                if(nums[j]>nums[i]){
                    arr.push_back(nums[j]);
                    b=false;
                    break;
                }
            }
            if(b==true){
                for(int j=0;j<i;j++){
                    if(nums[j]>nums[i]){
                        arr.push_back(nums[j]);
                        b=false;
                        break;
                    }
                }
            }
            if(b==true){
                arr.push_back(-1);
            }
        }
        return arr;
    }
};

//question 4:Odd Even Linked List
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head==NULL || head->next==NULL ||head->next->next==NULL){
            return head;
        }
        else{
            int k=1;
            ListNode* temp=head;
            while(true){
                ListNode* tempbw=temp;
                for(int i=0;i<=k;i++){
                    temp=temp->next;
                    if(temp==NULL){
                        return head;
                    }
                }
                ListNode *it1=tempbw->next;
                ListNode *it2=temp->next;
                tempbw->next=temp;
                temp->next=it1;
                for(int i=1;i<k;i++){
                    it1=it1->next;
                }
                it1->next=it2;
                k++;
            }
        }
        
        
    }
};
